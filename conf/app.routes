# microservice specific routes

GET         /registration                                                               controllers.Registration.registration
POST        /registration                                                               controllers.Registration.register
GET         /confirmation                                                               controllers.Registration.confirmation

GET         /verification                                                               controllers.Registration.verify(code: String)
GET         /resend-verification                                                        controllers.Registration.resendVerification
GET         /resend-confirmation                                                        controllers.Registration.resendConfirmation

GET         /login                                                                      controllers.UserLoginAccount.login
GET         /login/2sv-recommendation                                                   controllers.ProtectAccount.get2svRecommendationPage
POST        /login                                                                      controllers.UserLoginAccount.authenticate
GET         /login/2SV-help                                                             controllers.UserLoginAccount.get2SVHelpConfirmationPage
POST        /login/2SV-help                                                             controllers.UserLoginAccount.confirm2SVHelp
GET         /login/2SV-help/complete                                                    controllers.UserLoginAccount.get2SVHelpCompletionPage
GET         /login-totp                                                                 controllers.UserLoginAccount.enterTotp
POST        /login-totp                                                                 controllers.UserLoginAccount.authenticateTotp
GET         /login/2SV-not-set                                                          controllers.ProtectAccount.get2SVNotSetPage

GET         /logout                                                                     controllers.UserLogoutAccount.logout

GET         /logout/survey                                                              controllers.UserLogoutAccount.logoutSurvey
POST        /logout/survey                                                              controllers.UserLogoutAccount.logoutSurveyAction

GET         /support                                                                    controllers.Support.raiseSupportEnquiry
POST        /support                                                                    controllers.Support.submitSupportEnquiry
GET         /support/submitted                                                          controllers.Support.thankyou

GET         /locked                                                                     controllers.UserLoginAccount.accountLocked

GET         /profile                                                                    controllers.Profile.showProfile
GET         /profile/change                                                             controllers.Profile.changeProfile
POST        /profile                                                                    controllers.Profile.updateProfile

GET         /profile/protect-account                                                    controllers.ProtectAccount.getProtectAccount
GET         /profile/protect-account/setup                                              controllers.ProtectAccount.getQrCode
GET         /profile/protect-account/access-code                                        controllers.ProtectAccount.getAccessCodePage
GET         /profile/protect-account/complete                                           controllers.ProtectAccount.getProtectAccountCompletedPage
POST        /profile/protect-account/enable                                             controllers.ProtectAccount.protectAccount
GET         /profile/protect-account/confirm-removal                                    controllers.ProtectAccount.get2SVRemovalConfirmationPage
POST        /profile/protect-account/confirm-removal                                    controllers.ProtectAccount.confirm2SVRemoval
GET         /profile/protect-account/remove                                             controllers.ProtectAccount.get2SVRemovalAccessCodePage
POST        /profile/protect-account/remove                                             controllers.ProtectAccount.remove2SV
GET         /profile/protect-account/remove/complete                                    controllers.ProtectAccount.get2SVRemovalCompletePage


GET         /profile/password                                                           controllers.Profile.showPasswordPage
POST        /profile/password                                                           controllers.Profile.updatePassword

GET         /profile/delete                                                             controllers.Profile.requestDeletion
POST        /profile/delete                                                             controllers.Profile.deleteAccount

GET         /forgot-password                                                            controllers.Password.showForgotPassword
POST        /forgot-password                                                            controllers.Password.requestReset

#TODO - Delete this first reset-password route when we have released the new version of TPD - APSR-1144
GET         /:email/reset-password                                                      controllers.Password.validateReset(email:String, code: String)
GET         /reset-password-link                                                        controllers.Password.validateReset(email:String, code: String)

GET         /reset-password                                                             controllers.Password.resetPasswordChange
POST        /reset-password                                                             controllers.Password.resetPassword
GET         /reset-password/error                                                       controllers.Password.resetPasswordError

GET         /applications                                                               controllers.AddApplication.manageApps

GET         /applications/add/production/10-days                                       controllers.AddApplication.tenDaysWarning

GET         /applications/add/sandbox                                                  controllers.AddApplication.addApplicationSubordinate
GET         /applications/add/production                                               controllers.AddApplication.addApplicationPrincipal

GET         /applications/add/:environment/name                                        controllers.AddApplication.addApplicationName(environment: domain.Environment)
POST        /applications/add/:environment/name                                        controllers.AddApplication.editApplicationNameAction(environment: domain.Environment)
GET         /applications/:id/add/:environment/subscriptions                           controllers.Subscriptions.addAppSubscriptions(id: String, environment: domain.Environment)

GET         /applications/:id/add/:environment/success                                 controllers.AddApplication.addApplicationSuccess(id: String, environment: domain.Environment)

GET         /applications/:id/team-members                                              controllers.ManageTeam.manageTeam(id: String, error: Option[String])
GET         /applications/:id/team-members/add                                          controllers.ManageTeam.addTeamMember(id: String)
POST        /applications/:id/team-members/add/:addTeamMemberPageMode                   controllers.ManageTeam.addTeamMemberAction(id: String, addTeamMemberPageMode: domain.AddTeamMemberPageMode)
GET         /applications/:id/team-members/:teamMemberHash/remove-confirmation          controllers.ManageTeam.removeTeamMember(id: String, teamMemberHash: String)
POST        /applications/:id/team-members/remove                                       controllers.ManageTeam.removeTeamMemberAction(id: String)

GET         /applications/:id/details                                                   controllers.Details.details(id: String)
GET         /applications/:id/details/change                                            controllers.Details.changeDetails(id: String)
POST        /applications/:id/details/change                                            controllers.Details.changeDetailsAction(id: String)
GET         /applications/:id/details/terms-of-use                                      controllers.TermsOfUse.termsOfUse(id: String)
POST        /applications/:id/details/terms-of-use                                      controllers.TermsOfUse.agreeTermsOfUse(id: String)

GET         /application/:id/redirect-uris                                              controllers.Redirects.redirects(id: String)
GET         /application/:id/redirect-uris/add                                          controllers.Redirects.addRedirect(id: String)
POST        /application/:id/redirect-uris/add                                          controllers.Redirects.addRedirectAction(id: String)
POST        /application/:id/redirect-uris/delete-confirmation                          controllers.Redirects.deleteRedirect(id: String)
POST        /application/:id/redirect-uris/delete                                       controllers.Redirects.deleteRedirectAction(id: String)
POST        /application/:id/redirect-uris/change                                       controllers.Redirects.changeRedirect(id: String)
POST        /application/:id/redirect-uris/change-confirmation                          controllers.Redirects.changeRedirectAction(id: String)

GET         /applications/:id/delete                                                    controllers.DeleteApplication.deleteApplication(id: String, error: Option[String])
GET         /applications/:id/delete-principal-confirm                                  controllers.DeleteApplication.deletePrincipalApplicationConfirm(id: String, error: Option[String])
POST        /applications/:id/delete-principal                                          controllers.DeleteApplication.deletePrincipalApplicationAction(id: String)
GET         /applications/:id/delete-subordinate-confirm                                controllers.DeleteApplication.deleteSubordinateApplicationConfirm(id: String)
POST        /applications/:id/delete-subordinate                                        controllers.DeleteApplication.deleteSubordinateApplicationAction(id: String)

GET         /applications/:id/ip-whitelist                                              controllers.IpWhitelist.manageIpWhitelist(id: String)
GET         /applications/:id/ip-whitelist/change                                       controllers.IpWhitelist.changeIpWhitelist(id: String)
POST        /applications/:id/ip-whitelist/change                                       controllers.IpWhitelist.changeIpWhitelistAction(id: String)

GET         /applications/:id/subscriptions                                             controllers.Subscriptions.manageSubscriptions(id: String)

POST        /applications/:id/change-subscription                                       controllers.Subscriptions.changeApiSubscription(id: String, context: String, version: String, redirectTo: String)
GET         /applications/:id/change-locked-subscription                                controllers.Subscriptions.changeLockedApiSubscription(id: String, name: String, context: String, version: String, redirectTo: String)
POST        /applications/:id/change-locked-subscription                                controllers.Subscriptions.changeLockedApiSubscriptionAction(id: String, name: String, context: String, version: String, redirectTo: String)

GET         /applications/:id/credentials                                               controllers.Credentials.credentials(id: String, error: Option[String])

POST        /applications/:id/client-secret-new                                         controllers.Credentials.addClientSecret(id: String)
GET         /applications/:id/client-secret-new/:index                                  controllers.Credentials.getProductionClientSecret(id: String, index: Integer)

POST        /applications/:id/delete-client-secrets/select                              controllers.Credentials.selectClientSecretsToDelete(id: String)
POST        /applications/:id/delete-client-secrets/confirm                             controllers.Credentials.selectClientSecretsToDeleteAction(id: String)
POST        /applications/:id/delete-client-secrets                                     controllers.Credentials.deleteClientSecretsAction(id: String)

GET         /applications/:id/request-check                                             controllers.ApplicationCheck.requestCheckPage(id: String)
POST        /applications/:id/request-check                                             controllers.ApplicationCheck.requestCheckAction(id: String)
GET         /applications/:id/request-check/submitted                                   controllers.ApplicationCheck.credentialsRequested(id: String)
GET         /applications/:id/request-check/contact                                     controllers.ApplicationCheck.contactPage(id: String)
POST        /applications/:id/request-check/contact                                     controllers.ApplicationCheck.contactAction(id: String)
GET         /applications/:id/request-check/name                                        controllers.ApplicationCheck.namePage(id: String)
POST        /applications/:id/request-check/name                                        controllers.ApplicationCheck.nameAction(id: String)
GET         /applications/:id/request-check/subscriptions                               controllers.ApplicationCheck.apiSubscriptionsPage(id: String)
POST        /applications/:id/request-check/subscriptions                               controllers.ApplicationCheck.apiSubscriptionsAction(id: String)
GET         /applications/:id/request-check/privacy-policy                              controllers.ApplicationCheck.privacyPolicyPage(id: String)
POST        /applications/:id/request-check/privacy-policy                              controllers.ApplicationCheck.privacyPolicyAction(id: String)
GET         /applications/:id/request-check/terms-and-conditions                        controllers.ApplicationCheck.termsAndConditionsPage(id: String)
POST        /applications/:id/request-check/terms-and-conditions                        controllers.ApplicationCheck.termsAndConditionsAction(id: String)
GET         /applications/:id/request-check/terms-of-use                                controllers.ApplicationCheck.termsOfUsePage(id: String)
POST        /applications/:id/request-check/terms-of-use                                controllers.ApplicationCheck.termsOfUseAction(id: String)
GET         /applications/:id/request-check/team                                        controllers.ApplicationCheck.team(id: String)
POST        /applications/:id/request-check/team                                        controllers.ApplicationCheck.teamAction(id: String)
GET         /applications/:id/request-check/team/add                                    controllers.ApplicationCheck.teamAddMember(id: String)
GET         /applications/:id/request-check/team/remove-confirmation/:teamMemberHash    controllers.ApplicationCheck.teamMemberRemoveConfirmation(id: String, teamMemberHash: String)
POST        /applications/:id/request-check/team/remove                                 controllers.ApplicationCheck.teamMemberRemoveAction(id: String)

POST        /applications/:id/context/:apiContext/version/:version/subscriptionFields   controllers.Subscriptions.saveSubscriptionFields(id: String, apiContext: String, version: String, subscriptionRedirect: String)

GET         /application-verification                                                   controllers.ApplicationVerification.verifyUplift(code: String)
GET         /user-navlinks                                                              controllers.Navigation.navLinks

GET         /partials/terms-of-use                                                      controllers.TermsOfUse.termsOfUsePartial

GET         /assets/*file                                                               @controllers.Assets.versioned(path="/public", file: Asset)

GET         /keep-alive                                                                 controllers.SessionController.keepAlive()
